stages:
  - test
  - build
  - verifybuild
  - publish

.test_template: &test_template
  stage: test
  before_script:
    - apt-get update && apt-get install -y git
    - pip install -U pip
    - pip install -U -r requirements_dev.txt
  tags:
    - kubernetes

python3:
  <<: *test_template
  image: python:3-slim
  script:
    - pytest

python flake8:
  stage: test
  image: python:3-slim
  script:
    - pip install tox
    - tox -e flake8
  artifacts:
    reports:
      codequality: gl-code-quality-report.json

python lint:
  <<: *test_template
  image: python:3-slim
  script:
    - flake8 askanna tests
  allow_failure: true

python 36:
  <<: *test_template
  image: python:3.6
  script:
    - tox -e py36

python 37:
  <<: *test_template
  image: python:3.7
  script:
    - tox -e py37

python 38:
  <<: *test_template
  image: python:3.8
  script:
    - tox -e py38

python 39:
  <<: *test_template
  image: python:3.9-slim
  script:
    - tox -e py39

.build_docker_image_template: &build_docker_image_template
  stage: build
  tags:
    - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  variables:
    PY_VERSION: "3-slim"
  script:
    - if [ $CI_COMMIT_REF_NAME == "master" ] ; then export DESTINATION="${CI_REGISTRY_IMAGE}:${PY_VERSION}-${CI_COMMIT_REF_SLUG}" ; else export DESTINATION="${CI_REGISTRY_IMAGE}/wip:${PY_VERSION}-${CI_COMMIT_REF_SLUG}"; fi
    - echo "Building image to " $DESTINATION
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination ${DESTINATION} --build-arg PY_VERSION=${PY_VERSION}
  except:
    - triggers
    - schedules

build_docker_image_version:
  <<: *build_docker_image_template
  only:
    refs:
      - /v*.*.*/

build_docker_image_master:
  <<: *build_docker_image_template
  except:
    - triggers
  only:
    refs:
      - master

image_py36:
  <<: *build_docker_image_template
  variables:
    PY_VERSION: "3.6-slim"
  except:
    - triggers

image_py37:
  <<: *build_docker_image_template
  variables:
    PY_VERSION: "3.7-slim"
  except:
    - triggers

image_py38:
  <<: *build_docker_image_template
  variables:
    PY_VERSION: "3.8-slim"
  except:
    - triggers

image_py39:
  <<: *build_docker_image_template
  variables:
    PY_VERSION: "3.9-slim"
  except:
    - triggers

.verify_docker_build: &verify_docker_build
  stage: verifybuild
  variables:
    PY_VERSION: "3-slim"
  image: $CI_REGISTRY_IMAGE:${PY_VERSION}-${CI_COMMIT_REF_SLUG}
  tags:
    - kubernetes
  script:
    - echo "Using production image " $CI_REGISTRY_IMAGE:$PY_VERSION-$CI_COMMIT_REF_SLUG
    - python -V
    - askanna --version
    - askanna
  only:
    refs:
      - master

.verify_docker_build_wip: &verify_docker_build_wip
  stage: verifybuild
  variables:
    PY_VERSION: "3-slim"
  image: $CI_REGISTRY_IMAGE/wip:${PY_VERSION}-${CI_COMMIT_REF_SLUG}
  tags:
    - kubernetes
  script:
    - echo "Using WIP image " $CI_REGISTRY_IMAGE/wip:${PY_VERSION}-${CI_COMMIT_REF_SLUG}
    - python -V
    - askanna --version
    - askanna
  except:
    refs:
      - master

verify_docker_build_master:
  <<: *verify_docker_build

verify_docker_build_master_py36:
  <<: *verify_docker_build
  variables:
    PY_VERSION: "3.6-slim"

verify_docker_build_master_py37:
  <<: *verify_docker_build
  variables:
    PY_VERSION: "3.7-slim"

verify_docker_build_master_py38:
  <<: *verify_docker_build
  variables:
    PY_VERSION: "3.8-slim"

verify_docker_build_master_py39:
  <<: *verify_docker_build
  variables:
    PY_VERSION: "3.9-slim"

verify_docker_build_wip:
  <<: *verify_docker_build_wip

verify_docker_build_wip_py36:
  <<: *verify_docker_build_wip
  variables:
    PY_VERSION: "3.6-slim"

verify_docker_build_wip_py37:
  <<: *verify_docker_build_wip
  variables:
    PY_VERSION: "3.7-slim"

verify_docker_build_wip_py38:
  <<: *verify_docker_build_wip
  variables:
    PY_VERSION: "3.8-slim"

verify_docker_build_wip_py39:
  <<: *verify_docker_build_wip
  variables:
    PY_VERSION: "3.9-slim"

publish_to_pypi:
  stage: publish
  image: python:3-slim
  tags:
    - kubernetes
  before_script:
    - echo $PYPIRC | base64 -d > ~/.pypirc
    - pip install -U pip wheel twine
  script:
    - python3 setup.py sdist bdist_wheel
    - twine upload --verbose --non-interactive --config-file ~/.pypirc -r pypi dist/*
  only:
    refs:
      - master
