stages:
  - test
  - build
  - verify build
  - publish

include:
  - template: Code-Quality.gitlab-ci.yml

.test_template: &test_template
  stage: test
  image: python:3-slim
  before_script:
    - apt-get update && apt-get install -y git
    - pip install hatch
  tags:
    - kubernetes

.twine_template: &twine_template
  stage: publish
  image: python:3-slim
  tags:
    - kubernetes
  before_script:
    - pip install build twine
    - python -m build

code_quality:
  rules:
    - if: $CODE_QUALITY_DISABLED
      when: never
    - if: ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_TAG)
      when: never
    - if: $CI_COMMIT_BRANCH
  before_script:
    - echo -e "[pycodestyle]\nmax-line-length = 119" > setup.cfg
    - echo -e "rule 'MD013', :line_length = 119" > .mdlrc

lint:
  <<: *test_template
  script:
    - hatch run +py=3 test:lint

coverage:
  <<: *test_template
  script:
    - hatch run +py=3 test:cov
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    expire_in: 2 weeks
    name: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"
    paths:
      - htmlcov/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: junit.xml

pytest:
  <<: *test_template
  parallel:
    matrix:
      - PY_VERSION: ["3", "3.7", "3.8", "3.9", "3.10", "3.11"]
  image: python:$PY_VERSION-slim
  script:
    - hatch run +py=$PY_VERSION test:pytest

twine check:
  <<: *twine_template
  stage: test
  script:
    - twine check dist/*

build image:
  stage: build
  needs: [pytest]
  tags:
    - kubernetes
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  parallel:
    matrix:
      - PY_VERSION: ["3", "3.7", "3.8", "3.9", "3.10", "3.11"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        DESTINATION: $CI_REGISTRY_IMAGE:python-$PY_VERSION-$CI_COMMIT_REF_SLUG
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        DESTINATION: $CI_REGISTRY_IMAGE/tag:$CI_COMMIT_TAG-python-$PY_VERSION
    - if: '$CI_PIPELINE_SOURCE == "push"'
      variables:
        DESTINATION: $CI_REGISTRY_IMAGE/review:$CI_COMMIT_REF_SLUG-python-$PY_VERSION
  script:
    - echo "Building image to " $DESTINATION
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor --context $CI_PROJECT_DIR --dockerfile $CI_PROJECT_DIR/Dockerfile --destination $DESTINATION --build-arg PY_VERSION=$PY_VERSION-slim

verify image:
  stage: verify build
  needs: [build image]
  parallel:
    matrix:
      - PY_VERSION: ["3", "3.7", "3.8", "3.9", "3.10", "3.11"]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE:python-$PY_VERSION-$CI_COMMIT_REF_SLUG
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE/tag:$CI_COMMIT_TAG-python-$PY_VERSION
    - if: '$CI_PIPELINE_SOURCE == "push"'
      variables:
        DOCKER_IMAGE: $CI_REGISTRY_IMAGE/review:$CI_COMMIT_REF_SLUG-python-$PY_VERSION
  image: $DOCKER_IMAGE
  tags:
    - kubernetes
  script:
    - echo "Using Docker image " $DOCKER_IMAGE
    - python -V
    - askanna --version
    - askanna
    - askanna-run-utils --version
    - askanna-run-utils

publish to pypi:
  <<: *twine_template
  needs: [twine check, pytest]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - echo $PYPIRC | base64 -d > ~/.pypirc
    - python -m twine upload --verbose --non-interactive --config-file ~/.pypirc -r pypi dist/*

publish to testpypi:
  <<: *twine_template
  needs: [twine check]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: never
    - if: '$CI_COMMIT_BRANCH'
      when: manual
      allow_failure: true
  script:
    - echo $PYPITESTRC | base64 -d > ~/.pypirc
    - python -m twine upload --verbose --non-interactive --config-file ~/.pypirc -r testpypi dist/*

publish to docker:
  stage: publish
  needs: [verify image]
  image: docker:latest
  services:
    - docker:dind
  tags:
    - docker
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      allow_failure: true
  before_script:
    - echo "$DOCKER_TOKEN" | docker login --username $DOCKER_USER --password-stdin
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - docker pull gitlab.askanna.io:4567/askanna/askanna-cli --all-tags
    - docker tag gitlab.askanna.io:4567/askanna/askanna-cli:python-3-main askanna/python:3
    - docker tag gitlab.askanna.io:4567/askanna/askanna-cli:python-3-main askanna/python:latest
    - docker tag gitlab.askanna.io:4567/askanna/askanna-cli:python-3.7-main askanna/python:3.7
    - docker tag gitlab.askanna.io:4567/askanna/askanna-cli:python-3.8-main askanna/python:3.8
    - docker tag gitlab.askanna.io:4567/askanna/askanna-cli:python-3.9-main askanna/python:3.9
    - docker tag gitlab.askanna.io:4567/askanna/askanna-cli:python-3.10-main askanna/python:3.10
    - docker tag gitlab.askanna.io:4567/askanna/askanna-cli:python-3.11-main askanna/python:3.11
    - docker push askanna/python:latest
    - docker push askanna/python:3
    - docker push askanna/python:3.7
    - docker push askanna/python:3.8
    - docker push askanna/python:3.9
    - docker push askanna/python:3.10
    - docker push askanna/python:3.11
  after_script:
    - docker logout

publish to public repos:
  stage: publish
  needs: [twine check, pytest]
  tags:
    - kubernetes
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      variables:
        TARGET: HEAD:main
    - if: '$CI_COMMIT_TAG =~ /^v[0-9]+\.[0-9]+\.[0-9]+$/'
      variables:
        TARGET: refs/tags/$CI_COMMIT_TAG
  before_script:
    - apt-get update -y && apt-get install openssh-client git curl -y
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY_GITLAB_COM" | tr -d '\r' | ssh-add - > /dev/null
    - echo "$SSH_PRIVATE_KEY_GITHUB_COM" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - git config --global user.email "hello@askanna.io"
    - git config --global user.name "AskAnna Robot"
  script:
    - git remote add gitlab git@gitlab.com:askanna/askanna-python.git
    - git remote add github git@github.com:askanna-io/askanna-python.git
    - git push gitlab $TARGET
    - git push github $TARGET
